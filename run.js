// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.
// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É.
const Game = require('./src/Game');
const readline = require('readline');
const Boomerang = require('./src/game-models/Boomerang');
const Enemy = require('./src/game-models/Enemy');
const Hero = require('./src/game-models/Hero');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function askNickname() {
  return new Promise((resolve) => {
    rl.question('–ù–∞–∑–æ–≤–∏—Ç–µ —Å–µ–±—è: ', (nickname) => {
      resolve(nickname);
    });
  });
}

function chooseSkin() {
  return new Promise((resolve) => {
    console.log('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –æ–±–ª–∏–∫:');
    console.log('1. ü¶¨ - –ë—É–π–≤–æ–ª');
    console.log('2. ü¶î - –ï–∂');
    console.log('3. üê¨ - –î–µ–ª—å—Ñ–∏–Ω');
    rl.question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±–ª–∏–∫–∞: ', (skin) => {
      let skinName;
      switch (skin) {
        case '1':
          skinName = 'ü¶¨';
          console.log('–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ–π–≤–æ–ª–∞');
          break;
        case '2':
          skinName = 'ü¶î';
          console.log('–í—ã –≤—ã–±—Ä–∞–ª–∏ –µ–∂–∞');
          break;
        case '3':
          skinName = 'üê¨';
          console.log('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–ª—å—Ñ–∏–Ω–∞');
          break;
        default:
          console.log('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –æ–±–ª–∏–∫. –í–∞–º –¥–æ—Å—Ç–∞–µ—Ç—Å—è –±–æ–π–≤–æ–ª');
          skinName = 'ü¶¨';
      }
      resolve(skinName);
    });
  });
}

function chooseWeapon() {
  return new Promise((resolve) => {
    console.log('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ:');
    console.log('1. ü™É - –ë—É–º–µ—Ä–∞–Ω–≥');
    // console.log('2. üí£ - –ë–æ–º–±–∞');
    rl.question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ä—É–∂–∏—è: ', (weaponNumber) => {
      let weapon;
      switch (weaponNumber) {
        case '1':
          weapon = new Boomerang();
          console.log('–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–º–µ—Ä–∞–Ω–≥');
          break;
        // case '2':
        //   weapon = new Bomb();
        //   console.log('–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ–º–±—É');
        //   break;
        default:
          console.log('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –æ—Ä—É–∂–∏–µ. –û—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–µ–∂–∞—Ç—å, –∞ –ª—É—á—à–µ –≤–æ–∑—å–º–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π weapon');
          weapon = new Boomerang();
      }
      resolve(weapon);
    });
  });
}

async function gameInit() {
  try {
    const nickname = await askNickname();
    const skin = await chooseSkin();
    const weapon = await chooseWeapon();
    // saveHero(nickname, weapon, skin);
    const hero = new Hero({ nickname, position: 0, weapon, skin });
    const game = new Game({ hero, trackLength: 30 });
    rl.close();
    game.play();
  } catch (error) {
    console.log(error);
  }
}

gameInit()


// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã.
